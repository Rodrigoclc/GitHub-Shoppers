import app from './app';
import config from './config/environment';
import database from './database/connection';

const startServer = async (): Promise<void> => {
  try {
    // Testar conex√£o com o banco de dados
    console.log('Testando conex√£o com o banco de dados...');
    await database.query('SELECT 1');
    console.log('‚úÖ Conex√£o com o banco de dados estabelecida com sucesso');

    // Iniciar servidor
    const server = app.listen(config.port, () => {
      console.log(`üöÄ Servidor rodando na porta ${config.port}`);
      console.log(`Documenta√ß√£o da API em http://localhost:${config.port}/docs`);
    });

    // Graceful shutdown
    const gracefulShutdown = (signal: string) => {
      console.log(`\nüõë Recebido sinal ${signal}. Iniciando shutdown graceful...`);
      
      server.close(async () => {
        console.log('üîå Servidor HTTP fechado');
        
        try {
          await database.close();
          console.log('üóÑÔ∏è Conex√µes do banco de dados fechadas');
          console.log('‚úÖ Shutdown conclu√≠do com sucesso');
          process.exit(0);
        } catch (error) {
          console.error('‚ùå Erro durante o shutdown:', error);
          process.exit(1);
        }
      });

      // For√ßar sa√≠da se o shutdown demorar muito
      setTimeout(() => {
        console.error('‚ö†Ô∏è Shutdown for√ßado ap√≥s timeout');
        process.exit(1);
      }, 10000);
    };

    // Handlers para sinais de sistema
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // Handler para erros n√£o capturados
    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
      gracefulShutdown('UNHANDLED_REJECTION');
    });

    process.on('uncaughtException', (error) => {
      console.error('‚ùå Uncaught Exception:', error);
      gracefulShutdown('UNCAUGHT_EXCEPTION');
    });

  } catch (error) {
    console.error('‚ùå Falha ao iniciar o servidor:', error);
    process.exit(1);
  }
};

// Iniciar servidor apenas se este arquivo for executado diretamente
if (require.main === module) {
  startServer();
}

export default app;
